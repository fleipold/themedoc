#!/usr/bin/env ruby
require 'trollop'
require 'yaml'
require 'mustache'

class Pandoc

    def initialize(opts, vars, input_file_name)
        @opts=opts;
        @vars=vars;
        @input_file_name=input_file_name;
    end

    def opts_string()
        @opts.map{ |x|
            if(!x[1])
                 ""
            else
                "--#{x[0]}" + ((x[1]!=true)?" " + x[1]:"")
            end
        }.join(" ")
    end

    def vars_string()
        @vars.map{ |x|
            if(!x[1])
                 ""
            else
                "-V #{x[0]}" + ((x[1]!=true)?":"+x[1]:"")
            end
        }.join(" ")
    end

    def run()
        command = "pandoc " + opts_string() + " " + vars_string() + " " + @input_file_name
        puts command
        output = ""
        IO.popen(command, "w+") do |io|
           output=io.read
        end
        puts output
    end

end

class Installer

    def install_if_needed()
        home = `(cd; pwd)`.strip
        dot_folder = "#{home}/.themedoc"
        if (File.exists?(dot_folder))
            return;
        end

        puts("Installing default themes..")
        `mkdir #{dot_folder}`
        theme_src=File.join(File.dirname(File.expand_path(__FILE__)), '/../themes')
        `cp -r #{theme_src}/* #{dot_folder}`
        puts("Done")
    end
end

class Theme
    def initialize(map)
        @map=map
    end

    def pandoc_opts
        @map["pandoc-opts"]
    end

    def pandoc_vars
        @map["pandoc-vars"]
    end

    def target_extension
        @map['target-extension']
    end

    def template_parameters
        @map['parameters'].select{ |param| param['target']=="template"}
    end

    def variable_override_parameters
        @map['parameters'].select{ |param| param['target']=="variable-override"}
    end

    def option_override_parameters
        @map['parameters'].select{ |param| param['target']=="option-override"}
    end


    def include(region_name)
        unless @map['include']
            return nil
        end
        @map['include'][region_name]

    end


    def before_body
        @map['before-body']
    end

    def after_body
        @map['after-body']
    end

    def parameters
        @map['parameters']
    end

    def to_s
        @map['description']
    end

end



class CommandLineParser
    attr_reader :opts, :theme, :theme_path, :input_file_name

    def initialize
            home = `(cd; pwd)`
            @theme_base_path = home.strip+"/.themedoc"
    end

    def load_theme(name)
            @theme_path = @theme_base_path + "/" + name
            @theme = Theme.new(YAML.load_file(theme_path + "/theme.yml"))
            return @theme
    end

    def list_themes
            puts "Available themes"
            puts "----------------"
            theme_names = `(cd #{@theme_base_path}; ls)`.split(/\n/)
            theme_descriptions = theme_names.map{|n| load_theme(n)}
            puts theme_names.zip(theme_descriptions).map{|t| t[0] + " => " + t[1].to_s}.join("\n")
    end

    def parse()
        theme_index=ARGV.index("--theme") || ARGV.index("-t");

        if theme_index
            if (ARGV.length < theme_index + 2)
                throw "No theme value provided"
            end
            theme_name = ARGV[theme_index + 1 ]
            load_theme(theme_name)
        end

        default_theme = false;
        if (!@theme)
            load_theme("default-html")
            default_theme = true;
        end

        theme = @theme


        @opts = Trollop::options do
            opt :theme, "Theme to be used", :type => String, :short => 't'
            opt :list_themes, "List available themes"
            opt :debug, "Do not remove temp files"
            if (theme)
                theme.parameters.each{|param|
                    opt param['name'].to_sym, param['desc'], :type => param['type'].to_sym
                }
            end
        end

        if (@opts[:list_themes])
            list_themes
            exit
        end

        if (default_theme)
            puts "No theme provided - using default-html"
        end

        if (ARGV.length == 0)
            throw "No input file specified"
        end


        @input_file_name = ARGV[0]
    end
end

def apply_overrides(parameter_definitions, command_line_opts, pandoc_parameters)
    parameter_definitions.each{|p|
        val=command_line_opts[p['name'].to_sym]
        if val
            if p['inverted']
                pandoc_parameters[p['original-name']]=false
            else
                pandoc_parameters[p['name']]=val
            end
        end
    }

end

def make_dot_file(path)
    splitted = path.split('/')
    len = splitted.length
    return (splitted[0, len -1] << ("." + splitted.last)).join('/')
end

installer = Installer.new()
installer.install_if_needed()

parser = CommandLineParser.new()
parser.parse()

theme = parser.theme

if (/\.[^.]*$/ =~ parser.input_file_name())
    output_file_name = parser.input_file_name().gsub(/\.[^.]*$/, "." +theme.target_extension)
else
    output_file_name = parser.input_file_name() + "." + theme.target_extension
end

puts "Writing output to #{output_file_name}"


pandoc_opts = theme.pandoc_opts
pandoc_vars = theme.pandoc_vars

apply_overrides(theme.variable_override_parameters, parser.opts, pandoc_vars)
apply_overrides(theme.option_override_parameters, parser.opts, pandoc_opts)


pandoc_opts["output"] = output_file_name

`ln -fs #{parser.theme_path}/resources .resources`

template_parameters = {}
theme.template_parameters \
    .map{|param| param['name']} \
    .each{|p_name| template_parameters[p_name]=parser.opts[p_name.to_sym]}

regions = ["in-header", "before-body", "after-body"]

regions.each{|region_name|
    snippet_file_name= make_dot_file(parser.input_file_name() + "." + region_name)
    if (theme.include(region_name))
        region_content = Mustache.render(theme.include(region_name), template_parameters);
        File.open(snippet_file_name, "w+") { |f| f << region_content}
        pandoc_opts['include-' + region_name]=snippet_file_name
    end
}



pandoc=Pandoc.new(pandoc_opts, pandoc_vars, parser.input_file_name)
pandoc.run

if (parser.opts[:debug])
    puts ("no cleanup")
    exit
end

`rm -rf .resources`
regions.each{|region_name|
    snippet_file_name= make_dot_file(parser.input_file_name() + "." + region_name)
    `rm -f #{snippet_file_name}`
}

