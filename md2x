#!/usr/bin/env ruby
require 'trollop'
require 'yaml'
require 'mustache'

theme_index=ARGV.index("--theme") || ARGV.index("-t");

if theme_index
    if (ARGV.length < theme_index + 2)
        throw "No theme value provided"
    end
    theme_name = ARGV[theme_index + 1 ]
    home = `(cd; pwd)`
    theme_path = home.strip+"/.md2x/themes/#{theme_name}"
    theme = YAML.load_file(theme_path + "/info.yml")
end

opts = Trollop::options do
    opt :theme, "Theme to be used", :type => String, :short => 't'
    # opt :filenam, "File to process", :type => String
    opt :lang, "Language (english | german)", :type => String, :short => 'l', :default => "english"
    opt :toc, "Table of contents", default: false
    opt :test_me
    theme['parameters'].each{|param|
        opt param['name'].to_sym, param['desc'], :type => param['type'].to_sym
    }
end

Trollop::die :theme, "theme must be specified" if !opts[:theme]

puts theme

puts ARGV

if (ARGV.length == 0)
    throw "No input file specified"
end

input_file_name = ARGV[0]

output_file_name = input_file_name.gsub(/.md$/, "." + theme['target-extension'])
header_snippet_name = "."+input_file_name+".header"

pandoc_opts = theme["pandoc-opts"];
pandoc_vars = theme["pandoc-vars"];
pandoc_opts["output"] = output_file_name

if (theme['header'])
    File.open(header_snippet_name, "w+") { |f| f << theme['header']}
    pandoc_opts['include-in-header']=header_snippet_name
end

puts `ln -fs #{theme_path}/resources .resources`

map = { 'x' => 42, 'y' => NIL}
template = <<-EOF
  The value of x is: {{x}} lala
  {{#y}}
  Hello
  {{/y}}
EOF

puts Mustache.render(template, map)


pandoc_opts_string = pandoc_opts.map{ |x|
    if(!x[1])
        return ""
    end
    "--#{x[0]}" + ((x[1]!=true)?" " + x[1]:"")
}.join(" ")

pandoc_vars_string = pandoc_vars.map{ |x|
    if(!x[1])
        return ""
    end
    "-V #{x[0]}" + ((x[1]!=true)?":"+x[1]:"")
}.join(" ")

command = "pandoc " + pandoc_opts_string + " " + pandoc_vars_string + " " + input_file_name

puts command

output = ""
IO.popen(command, "w+") do |io|
   output=io.read
end
puts output

`rm .resources`
`rm -f #{header_snippet_name}`

